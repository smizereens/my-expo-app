// backend/src/scripts/createAdmin.ts
import bcrypt from 'bcrypt';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();
const SALT_ROUNDS = 10;

async function createAdmin() {
  try {
    const username = 'admin';
    const password = 'admin123'; // –ü–û–ú–ï–ù–Ø–ô –ù–ê –ë–ï–ó–û–ü–ê–°–ù–´–ô –ü–ê–†–û–õ–¨!
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∞
    const existingAdmin = await prisma.user.findUnique({
      where: { username }
    });

    if (existingAdmin) {
      console.log('‚ùå –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
      return;
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    const admin = await prisma.user.create({
      data: {
        username,
        password: hashedPassword,
        role: 'admin'
      },
      select: {
        id: true,
        username: true,
        role: true,
        createdAt: true
      }
    });

    console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log(`   –õ–æ–≥–∏–Ω: ${username}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${password}`);
    console.log('');
    console.log('‚ö†Ô∏è  –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–º–µ–Ω–∏ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createAdmin();